#include <iostream>
using namespace std;

template <class T>
class Stack {
private:
    T* arr;
    int top;
    int capacity_;
    int size_;
    int minCapacity;

public:
    Stack(int capacity) : capacity_(capacity), size_(0), minCapacity(capacity) {
        arr = new T[capacity];
        top = -1;
    }

    ~Stack() {
        delete[] arr;
    }

    int capacity() {
        return capacity_;
    }

    int size() {
        return size_;
    }

    void printStack() {
        cout << "현재 스택 내용: ";
        for (int i = 0; i <= top; ++i) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }

    bool isEmpty() {
        return top == -1;
    }

    bool isFull() {
        return top == capacity_ - 1;
    }

    void sort() {
        for (int i = 0; i <= top; ++i) {
            for (int j = i + 1; j <= top; ++j) {
                if (arr[i] > arr[j]) {
                    T temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }
    }

    void push(T value) {
        if (isFull()) {
            resize(capacity_ + 5); // 스택이 다 차면 용량을 5씩 늘립니다.
            cout << "======STACK_SIZE_UP기능======" << endl;
            cout << "스택 크기가 " << capacity_ << "로 증가했습니다." << endl;
            cout << "=============================" << endl << endl;
        }
        arr[++top] = value;
        //printStack();
        size_++;
    }

    void push(int location, T value) {
        if (location < 0 || location > top + 1) {
            cerr << "해당 위치에 값이 없습니다.\n\n";
            return;
        }
        if (isFull()) {
            resize(capacity_ + 5); // 스택이 다 차면 용량을 5씩 늘립니다.
            cout << "======STACK_SIZE_UP기능======" << endl;
            cout << "스택 크기가 " << capacity_ << "로 증가했습니다." << endl;
            cout << "=============================" << endl << endl;
        }
        for (int i = top; i >= location; --i) {
            arr[i + 1] = arr[i];
        }
        arr[location] = value;
        //printStack();
        top++;
        size_++;
    }

    void push_range(T values[], int arrSize) {
        for (int i = 0; i < arrSize; ++i) {
            push(values[i]);
        }
    }

    void push_range(int location, T values[], int arrSize) {
        for (int i = arrSize - 1; i >= 0; --i) {
            push(location, values[i]);
        }
    }

    T pop() {
        if (isEmpty()) {
            cerr << "스택이 비었습니다.\n\n";
            return T();
        }
        T value = arr[top--];
        size_--;
        if (size_ < capacity_ - 5 && capacity_ > minCapacity) {
            resize(capacity_ - 5); // 스택 크기가 최소 크기 이상이면, 스택이 충분히 작아지면 용량을 5씩 줄입니다.
            cout << "스택 크기가 " << capacity_ << "로 축소되었습니다." << endl << endl;
        }
        return value;
    }

    T pop(int location) {
        if (location < 0 || location > top) {
            cerr << "해당 위치에 값이 없습니다.\n\n";
            return T();
        }
        T value = arr[location];
        for (int i = location; i < top; ++i) {
            arr[i] = arr[i + 1];
        }
        top--;
        size_--;
        if (size_ < capacity_ - 5 && capacity_ > minCapacity) {
            resize(capacity_ - 5); // 스택 크기가 최소 크기 이상이면, 스택이 충분히 작아지면 용량을 5씩 줄입니다.
            cout << "스택 크기가 " << capacity_ << "로 축소되었습니다." << endl << endl;
        }
        return value;
    }

private:
    void resize(int newCapacity) {
        T* newArr = new T[newCapacity];
        for (int i = 0; i <= top; ++i) {
            newArr[i] = arr[i];
        }
        delete[] arr;
        arr = newArr;
        capacity_ = newCapacity;
    }
};

int main() {
    Stack<int> stack(5);
    cout << "=======기본 PUSH 기능=======" << endl;
    stack.push(1);
    stack.printStack();
    stack.push(2);
    stack.printStack();
    stack.push(3);
    stack.printStack();
    stack.push(4);
    stack.printStack();
    stack.push(5);
    stack.printStack();
    cout << "============================" << endl << endl;

    stack.push(1, 10);
    cout << "========PUSH_AT 기능========" << endl;
    stack.printStack();
    stack.push(2, 20);
    stack.printStack();
    stack.push(3, 30);
    stack.printStack();
    stack.push(4, 40);
    stack.printStack();
    stack.push(5, 50);
    stack.printStack();
    cout << "==============================" << endl << endl;

    // 배열이 한번에 안들어가고 나눠서 들어가는 문제
    int values[] = { 7, 77 };
    stack.push_range(values, 2);
    cout << "========PUSH_RANGE 기능========" << endl;
    stack.printStack();
    int values[] = { 8, 88 };
    stack.push_range(0,values, 2);
    stack.printStack();
    cout << "==============================" << endl << endl;

    cout << "==========SORT 기능===========" << endl;
    stack.sort();
    stack.printStack();
    cout << "==============================" << endl << endl;

    //cout << endl << endl << endl << endl;
    //cout << "꺼내진 값: " << stack.pop() << endl;


    //cout << "꺼내진 값의 위치1: " << stack.pop(1) << endl;
    //stack.printStack();

    return 0;
}
