#include <stdio.h>
#include <stdlib.h>
#define QUEUE_SIZE 10

int* queue;
int	front;			// 전단
int	rear;			// 후단
int size = 1;

int isEmpty() {
	if (front == rear) return 1;
	else return 0;
}

// 큐가 포화 상태인지 확인하는 연산
int isFull() {
	if (front == (rear + 1) % (QUEUE_SIZE * size)) return 1;
	else return 0;
}

int queueSize() {
	return(rear - front + (QUEUE_SIZE * size)) % (QUEUE_SIZE * size);
}


void enqueueAt(int index, int item)
{
	if (isFull()) {
		printf(" Full QUEUE\n");

		// 임시 변수
		int* temp = (int*)malloc((QUEUE_SIZE * size) * sizeof(int));

		if (rear > front)
			for (int i = 0; i < (rear + 1); i++) temp[i] = queue[i];
		else {
			for (int i = front; i < (QUEUE_SIZE * size); i++) temp[i - front] = queue[i];
			for (int i = 0; i < (rear + 1); i++) temp[QUEUE_SIZE * size - (rear + 1) + i] = queue[i];
			front = 0;
			rear = QUEUE_SIZE * size - 1;
		}

		// queue 비우고 사이즈 키워서 다시 만듬
		free(queue);
		queue = (int*)malloc((QUEUE_SIZE * (size + 1)) * sizeof(int));

		for (int i = 0; i < (rear + 1); i++)
			queue[i] = temp[i];
		rear = (rear + 1) % (QUEUE_SIZE * (size + 1));

		for (int i = rear + 1; i > index; i--)
		{
			queue[i] = queue[i - 1];
		}
		queue[index + 1] = item;
		size++;
		free(temp);
	}

	else
	{
		//여기서 인덱스 이후 값을 밀어줘야함
		for (int i = rear; i > index; i--)
		{
			if (i == 0) {
				i = QUEUE_SIZE * size;
			}
			queue[(i + 1) % (QUEUE_SIZE * size)] = queue[i];
		}
		queue[index + 1] = item;
		rear = (rear + 1) % (QUEUE_SIZE * size);

	}
}

void enqueue(int item)
{
	if (isFull()) {
		printf(" Full QUEUE\n");
		int* temp = (int*)malloc((QUEUE_SIZE * size) * sizeof(int));

		if (rear > front)
			for (int i = 0; i < (rear + 1); i++) temp[i] = queue[i];
		else {
			for (int i = front; i < (QUEUE_SIZE * size); i++) temp[i - front] = queue[i];
			for (int i = 0; i < (rear + 1); i++) temp[QUEUE_SIZE * size - (rear + 1) + i] = queue[i];
			front = 0;
			rear = QUEUE_SIZE * size - 1;
		}

		free(queue);
		queue = (int*)malloc((QUEUE_SIZE * (size + 1)) * sizeof(int));
		for (int i = 0; i < (rear + 1); i++) queue[i] = temp[i];
		rear = (rear + 1) % (QUEUE_SIZE * (size + 1));
		queue[rear] = item;
		size++;
		free(temp);
	}

	else {
		rear = (rear + 1) % (QUEUE_SIZE * size);
		queue[rear] = item;
	}
}

int dequeueAt(int index) {
	if (isEmpty()) {
		printf("\n\n Queue is Empty!!\n");
		return 0;
	}
	else {
		if (queueSize() % QUEUE_SIZE == 0) {
			printf(" CHANGE DEQUEUE\n");
			int re = queue[index];
			int* temp = (int*)malloc((QUEUE_SIZE * (size - 1)) * sizeof(int));
			memset(temp, 0, sizeof(int) * QUEUE_SIZE * (size - 1));

			// 인덱스 이전 값들을 복사
			for (int i = front, j = 0; i < index; i++, j++) {
				temp[j] = queue[i];
			}

			// 인덱스 이후 값들을 복사 (인덱스 제외)
			for (int i = index + 1, j = index; i < rear + 1; i++, j++) {
				temp[j] = queue[i];
			}

			free(queue);
			queue = temp;
			front = 0;
			rear = QUEUE_SIZE * (size - 1) - 1;
			size--;
			printf("위치 %d값을 제거합니다.\n", index);
			return re;
		}
		else {
			// 큐가 가득 차있지 않으면 인덱스 이후 값들을 앞으로 당기기만 하면 됨
			for (int i = index; i < rear + 1; i++) {
				queue[i] = queue[i + 1];
			}
			rear--;
			printf("위치 %d값을 제거합니다.\n", index);
		}
	}
	return 0;
}


int dequeue() {
	if (isEmpty()) {	// 큐가 공백 상태인 경우
		printf("\n\n Queue is Empty!!\n");
		return 0;
	}
	else
	{
		if (queueSize() % QUEUE_SIZE == 0)
		{
			printf(" CHANGE DEQUEUE\n");
			int re;
			int* temp = (int*)malloc((QUEUE_SIZE * (size - 1)) * sizeof(int));

			re = queue[front + 1];

			if (rear > front)
				for (int i = front + 1; i < rear + 1; i++) temp[i - (front + 1)] = queue[i];
			else {
				for (int i = front + 1; i < QUEUE_SIZE * size; i++) temp[i - (front + 1)] = queue[i];
				//for (int i = 0; i < (rear + 1); i++) temp[QUEUE_SIZE * (size - 1) - (rear + 1) + i] = queue[i];

				for (int i = 0; i < (rear + 1); i++) temp[i + QUEUE_SIZE * size - front] = queue[i];
			}

			free(queue);

			queue = (int*)malloc((QUEUE_SIZE * (size - 1)) * sizeof(int));

			for (int i = 0; i < QUEUE_SIZE * (size - 1); i++) queue[i] = temp[i];

			front = 0;
			rear = QUEUE_SIZE * (size - 1) - 1;
			size--;

			free(temp);
			return re;
		}
		else {
			front = (front + 1) % (QUEUE_SIZE * size);
			return queue[front];
		}
	}
	return 0;
}

// 큐의 원소를 출력하는 연산
void printQueue() 
{
	int i, maxi = rear;
	if (front >= rear) maxi += (QUEUE_SIZE * size);
	printf("QUEUE SIZE [%d]", (QUEUE_SIZE * size));
	printf("\n QUEUE [ ");
	for (i = front + 1; i <= maxi; i++)
		printf("%d ", queue[i % (QUEUE_SIZE * size)]);
	printf("]\n-------------------------\n");
	/*printf("인덱스[");
	for (i = 0; i < QUEUE_SIZE * size; i++)
		printf("%d ", queue[i]);
	printf("]\n");*/
}

void main(void) {
	int i;
	queue = (int*)malloc(QUEUE_SIZE * sizeof(int));

	for (i = 1; i < 10; i++) 
		enqueue(i);
	
	/*printf("인덱스[");
	for (i = 0; i < QUEUE_SIZE * size; i++)
		printf("%d ", queue[i]);
	printf("\n");*/
	
	printQueue();

	for (i = 1; i < 5; i++) 
		dequeue();
	printQueue();

	for (i = 10; i < 16; i++) 
		enqueue(i);
	printQueue();

	//enqueueAt(11, 100);
	dequeueAt(3);
	printQueue();
	dequeueAt(3);
	printQueue();
	dequeueAt(1);
	printQueue();
	dequeueAt(1);
	printQueue();
	dequeueAt(1);
	printQueue();
	dequeueAt(1);
	printQueue();
	dequeueAt(1);
	printQueue();

	free(queue);
	getchar();
}