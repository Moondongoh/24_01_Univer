#include <stdio.h>
#include <stdlib.h>
#define QUEUE_SIZE 10

int* queue;
int	front;			// 전단
int	rear;			// 후단
int size = 1;

int isEmpty() {
	if (front == rear) return 1;
	else return 0;
}

// 큐가 포화 상태인지 확인하는 연산
int isFull() {
	if (front == (rear + 1) % (QUEUE_SIZE * size)) return 1;
	else return 0;
}

int queueSize() {
	return(rear - front + (QUEUE_SIZE * size)) % (QUEUE_SIZE * size);
}


void enqueueAt(int index, int item)
{
	if (isFull()) {
		printf(" Full QUEUE\n");

		// 임시 변수
		int* temp = (int*)malloc((QUEUE_SIZE * size) * sizeof(int));

		if (rear > front)
			for (int i = 0; i < (rear + 1); i++) temp[i] = queue[i];
		else {
			for (int i = front; i < (QUEUE_SIZE * size); i++) temp[i - front] = queue[i];
			for (int i = 0; i < (rear + 1); i++) temp[QUEUE_SIZE * size - (rear + 1) + i] = queue[i];
			front = 0;
			rear = QUEUE_SIZE * size - 1;
		}

		// queue 비우고 사이즈 키워서 다시 만듬
		free(queue);
		queue = (int*)malloc((QUEUE_SIZE * (size + 1)) * sizeof(int));

		for (int i = 0; i < (rear + 1); i++)
			queue[i] = temp[i];
		rear = (rear + 1) % (QUEUE_SIZE * (size + 1));

		for (int i = rear + 1; i > index; i--)
		{
			queue[i] = queue[i - 1];
		}
		queue[index + 1] = item;
		size++;
		free(temp);
	}

	else
	{
		//여기서 인덱스 이후 값을 밀어줘야함
		for (int i = rear; i > index; i--)
		{
			if (i == 0) {
				i = QUEUE_SIZE * size;
			}
			queue[(i + 1) % (QUEUE_SIZE * size)] = queue[i];
		}
		queue[index + 1] = item;
		rear = (rear + 1) % (QUEUE_SIZE * size);

	}
}

void enqueue(int item)
{
	if (isFull()) {
		printf(" Full QUEUE\n");
		int* temp = (int*)malloc((QUEUE_SIZE * size) * sizeof(int));

		if (rear > front)
			for (int i = 0; i < (rear + 1); i++) temp[i] = queue[i];
		else {
			for (int i = front; i < (QUEUE_SIZE * size); i++) temp[i - front] = queue[i];
			for (int i = 0; i < (rear + 1); i++) temp[QUEUE_SIZE * size - (rear + 1) + i] = queue[i];
			front = 0;
			rear = QUEUE_SIZE * size - 1;
		}

		free(queue);
		queue = (int*)malloc((QUEUE_SIZE * (size + 1)) * sizeof(int));
		for (int i = 0; i < (rear + 1); i++) queue[i] = temp[i];
		rear = (rear + 1) % (QUEUE_SIZE * (size + 1));
		queue[rear] = item;
		size++;
		free(temp);
	}

	else {
		rear = (rear + 1) % (QUEUE_SIZE * size);
		queue[rear] = item;
	}
}

int dequeueAt(int index)
{
	if (isEmpty())
	{	// 큐가 공백 상태인 경우
		printf("\n\n Queue is Empty!!\n");
		return 0;
	}

	else
	{
		if (queueSize() % QUEUE_SIZE == 0) // << 여기가 문제인거 같음 지금 큐에는 데이터 11개가 있는데 줄일려함
		{
			printf(" CHANGE DEQUEUE\n");

			int re;
			int* temp = (int*)malloc((QUEUE_SIZE * (size - 1)) * sizeof(int));

			//배열 초기화
			memset(temp, 0, sizeof(int) * QUEUE_SIZE * (size - 1));

			re = queue[index];


			if (rear > front)
			{
				for (int i = front, j = 0; i < rear + 1; i++, j++)
				{
					if (i < front+1+index)
					{
						temp[j] = queue[i];
						//printf("위치 %d값을 제거합니다.\n", index);
						 //printf("[%d]", j);
					}
					else {
						if (i == front + 1 + index) {
							re = queue[front + 1 + index];
							continue;
						}
						temp[j - 1] = queue[i];
					}
				}
			}
			// front > rear일때임즉 front를 앞으로 땡겨와야함 
			else
			{
				for (int i = front, j = 0; i < QUEUE_SIZE * size; i++, j++)
					if (i != index)
					{
						temp[j] = queue[i];
						//printf("위치 %d값을 제거합니다.\n", index);
					}
				//for (int i = 0; i < (rear + 1); i++) 
				// temp[QUEUE_SIZE * (size - 1) - (rear + 1) + i] = queue[i];

				for (int i = 0; i < (rear + 1); i++)
					if (i != index)
					{
						temp[i + QUEUE_SIZE * size - front] = queue[i];
					}
			}

			free(queue);

			queue = (int*)malloc((QUEUE_SIZE * (size - 1)) * sizeof(int));
			////배열 초기화
			//memset(queue, 0, sizeof(int) * QUEUE_SIZE * (size-1));

			//for (int i = 0; i < QUEUE_SIZE * (size - 1); i++) 
				//queue[i] = temp[i];

			queue = temp;

			front = 0;
			rear = QUEUE_SIZE * (size - 1)-1;
			size--;

			//free(temp);
			return re;
		}
		else
		{
			for (int i = index + 1; i < rear + 1; i++)
			{
				queue[i] = queue[i + 1];
			}
			rear--;
			printf("위치 %d값을 제거합니다.\n", index);
		}
	}
	return 0;
}

int dequeue() {
	if (isEmpty()) {	// 큐가 공백 상태인 경우
		printf("\n\n Queue is Empty!!\n");
		return 0;
	}
	else
	{
		if (queueSize() % QUEUE_SIZE == 0)
		{
			printf(" CHANGE DEQUEUE\n");
			int re;
			int* temp = (int*)malloc((QUEUE_SIZE * (size - 1)) * sizeof(int));

			re = queue[front + 1];

			if (rear > front)
				for (int i = front + 1; i < rear + 1; i++) temp[i - (front + 1)] = queue[i];
			else {
				for (int i = front + 1; i < QUEUE_SIZE * size; i++) temp[i - (front + 1)] = queue[i];
				//for (int i = 0; i < (rear + 1); i++) temp[QUEUE_SIZE * (size - 1) - (rear + 1) + i] = queue[i];

				for (int i = 0; i < (rear + 1); i++) temp[i + QUEUE_SIZE * size - front] = queue[i];
			}

			free(queue);

			queue = (int*)malloc((QUEUE_SIZE * (size - 1)) * sizeof(int));

			for (int i = 0; i < QUEUE_SIZE * (size - 1); i++) queue[i] = temp[i];

			front = 0;
			rear = QUEUE_SIZE * (size - 1) - 1;
			size--;

			free(temp);
			return re;
		}
		else {
			front = (front + 1) % (QUEUE_SIZE * size);
			return queue[front];
		}
	}
	return 0;
}

// 큐의 원소를 출력하는 연산
void printQueue()
{
	int i, maxi = rear;
	if (front >= rear) maxi += (QUEUE_SIZE * size);
	printf("QUEUE SIZE [%d]", (QUEUE_SIZE * size));
	printf("\n QUEUE [ ");
	for (i = front + 1; i <= maxi; i++)
		printf("%d ", queue[i % (QUEUE_SIZE * size)]);
	printf("]\n-------------------------\n");
	/*printf("인덱스[");
	for (i = 0; i < QUEUE_SIZE * size; i++)
		printf("%d ", queue[i]);
	printf("]\n");*/
}

void main(void) {
	int i;
	queue = (int*)malloc(QUEUE_SIZE * sizeof(int));

	for (i = 1; i < 10; i++)
		enqueue(i);

	/*printf("인덱스[");
	for (i = 0; i < QUEUE_SIZE * size; i++)
		printf("%d ", queue[i]);
	printf("\n");*/

	printQueue();

	for (i = 1; i < 5; i++)
		dequeue();
	printQueue();

	for (i = 10; i < 16; i++)
		enqueue(i);
	printQueue();

	//enqueueAt(11, 100);
	dequeueAt(3);
	printQueue();
	dequeueAt(3);
	printQueue();
	dequeueAt(1);
	printQueue();
	dequeueAt(1);
	printQueue();
	//dequeueAt(1);
	//printQueue();
	//dequeueAt(1);
	//printQueue();
	//dequeueAt(1);
	//printQueue();

	free(queue);
	getchar();
}

/*

int dequeueAt(int index) {

	if (index <0 || index > QUEUE_SIZE * size - 1) return NULL; // 인덱스에 대한 예외처리
	int index_Loc = front + 1;
	int queue_Volume;
	if (rear > front) {
		queue_Volume = rear - front;
	}
	else if (rear < front) {
		queue_Volume = QUEUE_SIZE * size - (front - rear - 1);
	}
	else {
		queue_Volume = 0;
	}

	if (index > queue_Volume - 1) {
		printf("범위를 벗어난 index 입니다.\n");
		return NULL;
	}

	for (int i = 0; i < index; i++) {
		index_Loc++;
	}

	if (index == 0) {

		return dequeue();

	}

	if (isEmpty()) {	// 큐가 공백 상태인 경우
		printf("\n\n Queue is Empty!!\n");
		return 0;
	}
	else
	{
		if (queueSize() % QUEUE_SIZE == 0)
		{
			printf(" CHANGE DEQUEUE\n");
			int re;
			int* temp = (int*)malloc((QUEUE_SIZE * (size - 1)) * sizeof(int));
			for (int i = 0; i < QUEUE_SIZE * (size - 1); i++) {
				temp[i] = i;
			}


			if (rear > front)
				for (int i = front; i < rear + 1; i++) {
					int j = i;
					if (i < index_Loc) {
						temp[i - (front)] = queue[i];
					}
					else {				// index 이후는 한칸 뒤를 가져온다.
						if (i == index_Loc) {
							re = queue[i];
						}
						j = i + 1;
						if (j < QUEUE_SIZE * (size))
							temp[i - (front)] = queue[j];
					}
				}

			else {

				int i = front;
				while (i != index_Loc) {//front 부터 끝까지
					i++;
					if (i > QUEUE_SIZE * (size)) {
						i = 0;
					}
				}
				re = queue[i];
				if (i > rear) {//index 가  front ~ 끝 사이에 있을 때
					for (int j = i; j < QUEUE_SIZE * (size)-2; j++) {
						queue[j] = queue[j + 1];	//index 위치부터 한칸씩 당기기(끝까지) _ 끝 한칸 비어있음
					}
					queue[QUEUE_SIZE * (size)-1] = queue[0];	//끝 한칸 채우기
					for (int j = 0; j < rear + 1; j++) {
						queue[j] = queue[j + 1];	// 시작 ~ rear 까지 한칸씩 당기기
					}
				}
				else {
					for (int j = i; j < rear - 1; j++) {
						queue[j] = queue[j + 1];
					}
				}



				for (int i = front; i < QUEUE_SIZE * size; i++) {
					temp[i - (front)] = queue[i];
				}
				for (int i = 0; i < (rear); i++) {
					temp[QUEUE_SIZE * (size - 1) - (rear + 1) + i] = queue[i];
				}
			}

			free(queue);

			queue = (int*)malloc((QUEUE_SIZE * (size - 1)) * sizeof(int));

			for (int i = 0; i < QUEUE_SIZE * (size - 1); i++) queue[i] = temp[i];

			front = 0;
			rear = (QUEUE_SIZE * (size - 1) - 1);

			size--;


			return re;
		}
		else {
			int re;
			if (front < rear) {
				for (int i = 0; i < QUEUE_SIZE * (size); i++) {
					if (i >= index_Loc) {
						if (i == index_Loc) {
							re = queue[i];
						}
						if (i + 1 < QUEUE_SIZE * (size))
							queue[i] = queue[i + 1];
					}
				}
			}
			else {
				int i = front;
				while (i != index_Loc) {//front 부터 끝까지
					i++;
					if (i > QUEUE_SIZE * (size)) {
						i = 0;
					}
				}
				re = queue[i];
				if (i > rear) {//index 가  front ~ 끝 사이에 있을 때
					for (int j = i; j < QUEUE_SIZE * (size)-2; j++) {
						queue[j] = queue[j + 1];	//index 위치부터 한칸씩 당기기(끝까지) _ 끝 한칸 비어있음
					}
					queue[QUEUE_SIZE * (size)-1] = queue[0];	//끝 한칸 채우기
					for (int j = 0; j < rear + 1; j++) {
						queue[j] = queue[j + 1];	// 시작 ~ rear 까지 한칸씩 당기기
					}
				}
				else {
					for (int j = i; j < rear - 1; j++) {
						queue[j] = queue[j + 1];
					}
				}
			}
			rear = (rear - 1) % (QUEUE_SIZE * (size));
			if (rear < 0) {
				rear = QUEUE_SIZE * (size)+rear;
			}
			return re;
		}
	}
	return 0;
}


*/