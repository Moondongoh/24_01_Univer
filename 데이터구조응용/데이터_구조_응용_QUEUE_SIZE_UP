#include <stdio.h>
#include <stdlib.h>
#define QUEUE_SIZE 10

int* queue;
int	front;			// 전단
int	rear;			// 후단
int size = 1;

int isEmpty() {
	if (front == rear) return 1;
	else return 0;
}

// 큐가 포화 상태인지 확인하는 연산
int isFull() {
	if (front == (rear + 1) % (QUEUE_SIZE * size)) return 1;
	else return 0;
}

int queueSize() {
	return(rear - front + (QUEUE_SIZE * size)) % (QUEUE_SIZE * size);
}

//void enqueue(int item) {
//	if (isFull()) {
//		printf(" Full QUEUE\n");
//		int* temp = (int*)malloc((QUEUE_SIZE * size) * sizeof(int));
//
//		if (rear > front)
//			for (int i = 0; i < (rear + 1); i++) temp[i] = queue[i];
//		else {
//			for (int i = front; i < (QUEUE_SIZE * size); i++) temp[i - front] = queue[i];
//			for (int i = 0; i < (rear + 1); i++) temp[QUEUE_SIZE * size - (rear + 1) + i] = queue[i];
//			front = 0;
//			rear = QUEUE_SIZE * size - 1;
//		}
//
//		free(queue);
//		queue = (int*)malloc((QUEUE_SIZE * (size + 1)) * sizeof(int));
//		for (int i = 0; i < (rear + 1); i++) queue[i] = temp[i];
//		rear = (rear + 1) % (QUEUE_SIZE * (size + 1));
//		queue[rear] = item;
//		size++;
//		free(temp);
//	}
//	else {
//		rear = (rear + 1) % (QUEUE_SIZE * size);
//		queue[rear] = item;
//	}
//}


void enqueue(int item) 
{
	if (isFull())
	{
		printf(" Full QUEUE\n");
		int* temp = (int*)malloc((QUEUE_SIZE * (size+1)) * sizeof(int));

		//배열 초기화
		memset(temp, 0, sizeof(int) * QUEUE_SIZE * (size + 1));

		if (rear <= front) 
		{
			// rear가 front보다 앞에 있는 경우
			for (int i = 0; i <= rear; i++) temp[i] = queue[i];
			for (int i = front; i < (QUEUE_SIZE * size); i++) temp[i + 10] = queue[i];
			front += QUEUE_SIZE;
		} 
		else 
		{
			// front가 rear보다 앞에 있는 경우
			for (int i = front; i <= rear; i++) temp[i] = queue[i];
		}

		free(queue);
		size++;

		queue = (int*)malloc(QUEUE_SIZE * size * sizeof(int));
		for (int i = 0; i < QUEUE_SIZE*size; i++) queue[i] = temp[i];

		rear = (rear + 1) % (QUEUE_SIZE * size);
		queue[rear] = item;
		
	}
	else 
	{
		rear = (rear + 1) % (QUEUE_SIZE * size);
		queue[rear] = item;
	}
}



int dequeue() {
	if (isEmpty()) {	// 큐가 공백 상태인 경우
		printf("\n\n Queue is Empty!!\n");
		return 0;
	}
	else
	{
		front = (front + 1) % (QUEUE_SIZE * size);
		return queue[front];
	}
	return 0;
}

// 큐의 원소를 출력하는 연산
void printQueue() {
	int i, maxi = rear;
	if (front >= rear) maxi += (QUEUE_SIZE * size);
	printf("QUEUE SIZE [%d]\n", (QUEUE_SIZE * size));
	printf("\n QUEUE [ ");
	for (i = front + 1; i <= maxi; i++)
		printf("%d ", queue[i % (QUEUE_SIZE * size)]);
	printf("]\n INDEX [");
	for (i = 0; i < QUEUE_SIZE * size; i++)
		printf("%d ", queue[i]);
	printf("]\n");
}

void main(void) {
	int i;
	queue = (int*)malloc(QUEUE_SIZE * sizeof(int));

	for (i = 1; i < 10; i++) enqueue(i);
	printQueue();

	for (i = 1; i < 5; i++) dequeue();
	printQueue();

	for (i = 10; i < 16; i++) enqueue(i);
	printQueue();

	free(queue);
	getchar();
}